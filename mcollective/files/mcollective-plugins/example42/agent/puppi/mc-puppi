#!/usr/bin/env ruby

# Client program for the mcollective puppi agent 
#
# Released under the GPLv2

require 'mcollective'

include MCollective::RPC

options = rpcoptions do |parser, options|
    options[:timeout] = 180

    parser.define_head "Execute Puppi commands"
    parser.banner = "Usage: mc-puppi [filters] command project [puppioptions]"
    parser.separator ""
    parser.separator "Available commands:"
    parser.separator "  check - Run puppi check:"
    parser.separator "  deploy - Run puppi deploy:"
    parser.separator "  rollback - Run puppi rollback:"
    parser.separator "  init - Run puppi init:"
end

if MCollective::Util.empty_filter?(options[:filter])
    print("Do you really want to operate on services unfiltered? (y/n): ")
    STDOUT.flush

    exit unless STDIN.gets.chomp =~ /^y$/
end

if ARGV.length > 1
    command = ARGV.shift
    project = ARGV.shift
#    puppioptions = ARGV.shift

    unless command =~ /^(check|deploy|rollback|init)$/
        puts("Command has to be check|deploy|rollback|init")
        exit 1
    end
else
    puts("Please specify a command and project")
    exit 1
end

mc = rpcclient("puppi", :options => options)
mc.progress = true
mc.send(command) do |resp|
    begin
        printf("%-40s status=%s\n", result[:sender], result[:statusmsg])
        printf("    %-40s\n\n", result[:data][:output])
    exitcode = result[:data][:exitcode].to_i

    rescue RPCError => er
        puts "RPC Agent error: #{er}"
    end
end

