#!/usr/bin/env ruby

# Client program for the mcollective puppi agent 
#
# Released under Apache License 2.0

require 'mcollective'

include MCollective::RPC

options = rpcoptions do |parser, options|
    options[:timeout] = 180

    parser.define_head "Execute Puppi commands"
    parser.banner = "Usage: mc-puppi [filters] command [project] [puppioptions]"
    parser.separator ""
    parser.separator "Available commands:"
    parser.separator "  check - Run puppi check"
    parser.separator "  info - Run puppi info"
    parser.separator "  log - Run puppi log"
    parser.separator "  deploy <project> - Run puppi deploy on the defined project"
    parser.separator "  rollback <project> - Run puppi rollback latest on the defined project"
    parser.separator "  init <project> - Run puppi init on the defined project"
end

if MCollective::Util.empty_filter?(options[:filter])
    print("Do you really want to operate on services unfiltered? (y/n): ")
    STDOUT.flush

    exit unless STDIN.gets.chomp =~ /^y$/
end

if ARGV.length >= 1
    command = ARGV.shift
    project = ARGV.shift
    puppioptions = ARGV.shift

    unless command =~ /^(check|deploy|rollback|init|info|log)$/
        puts("Command has to be check|info|log|deploy|rollback|init")
        exit 1
    end
else
    puts("Please specify at least a command")
    exit 1
end

mc = rpcclient("puppi", :options => options)
mc.progress = true
mc.send(command, {:project => project}) do |resp|
    begin
      #  printf("%-1s %s\n", resp[:sender], resp[:body][:data])
	puts resp[:body][:data]
        exitcode = resp[:body][:exitcode].to_i

    rescue RPCError => er
        puts "RPC Agent error: #{er}"
    end
end

