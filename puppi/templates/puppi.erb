#!/bin/bash
configfile="<%= scope.lookupvar('puppi::params::basedir') %>/puppi.conf"

# This is the actually command used to run the differnet scripts
# Use cat for debugging, DONOTHING, purposes
# runcommand="cat"
runcommand=""

# Define output verbosity (max, min, none)
verbosity="max"

# Define action tag
export tag=$(date +%Y%m%d-%H%M%S)

counter=0

# Load general configurations
if [ ! -f $configfile ] ; then
    echo "Config file: $configfile not found"
    exit 1
else
    . $configfile
    . $scriptsdir/functions
fi

# Main functions
check_host () {
    for command in $(ls -v1 $checksdir) ; do
        title="Executing host check: $command"
        code=$(cat "$checksdir/$command")
        echo -n $title
        ask_interactive
        output=$($runcommand "$checksdir/$command" 2>&1)
        handle_result
    done
    show_report
}

check () {
    for command in $(ls -v1 $projectsdir/$project/check) ; do
        title="Executing project check: $command"
        code=$(cat "$projectsdir/$project/check/$command")
        echo -n $title
        ask_interactive
        output=$($runcommand "$projectsdir/$project/check/$command" 2>&1)
        handle_result
    done

    check_host
}

rollback () {
    echo "Choose deploy to rollback:"
    ls -l $archivedir/$project
    read rollbackversion
    echo "export rollbackversion=$rollbackversion" >> $workdir/$project/config
    
    for command in $(ls -v1 $projectsdir/$project/rollback) ; do
        title="Executing rollback command: $command"
        code=$(cat "$projectsdir/$project/rollback/$command")
        echo -n $title
        ask_interactive
        output=$($runcommand "$projectsdir/$project/rollback/$command" 2>&1)
        handle_result
    done

    send_reports
    show_report
}

deploy () {
    for command in $(ls -v1 $projectsdir/$project/deploy) ; do
        title="Executing deploy command: $command"
        code=$(cat "$projectsdir/$project/deploy/$command")
        echo -n $title
        ask_interactive
        output=$($runcommand "$projectsdir/$project/deploy/$command" 2>&1)
        handle_result
        [ "$EXITCRIT" = "1" ] && [ "$force" != "yes" ] && break
    done

    send_reports
    show_report
}

save_summary () {
    tagend=$(date +%Y%m%d-%H%M%S)

    result="OK"
    if [ "$EXITWARN" = "1" ] ; then
        result="WARNING"
    fi
    if [ "$EXITCRIT" = "1" ] ; then
        result="ERROR"
    fi

    echo "Report for $action on $project" > $logdir/$project/$tag/summary
    echo "Job start: $tag" >> $logdir/$project/$tag/summary
    echo "Job end: $tagend" >> $logdir/$project/$tag/summary
    echo "Job result: $result" >> $logdir/$project/$tag/summary
    echo "Actions executed:" >> $logdir/$project/$tag/summary
    cd $logdir/$project/$tag/
    for message in $(ls -v1 $logdir/$project/$tag/ | grep -v summary ) ; do
        msg_title=$(head -1 $message)
        msg_code=$(head -2 $message | tail -1) 
        msg_result=$(head -3 $message | tail -1) 
        echo "[$msg_result] $msg_title : $msg_code" >> $logdir/$project/$tag/summary
    done

    # Copy runtime config in archive
    cp $workdir/$project/config $logdir/$project/$tag/
}

send_reports () {
    save_summary
    for command in $(ls -v1 $projectsdir/$project/report) ; do
        title="Reporting: $command"
        code=$(cat "$projectsdir/$project/report/$command")
        echo -n $title
        output=$($runcommand "$projectsdir/$project/report/$command" 2>&1)
        handle_result
    done
}

show_report () {
    echo
    echo "REPORT FOR PUPPI - STATUS $result"
    echo "Summary of operations is: $logdir/$project/$tag/summary "
    echo "Details are in : $logdir/$project/$tag/ "
    echo "Runtime config file is: $workdir/$project/config (Will be rewritten at the next puppi run)"
    test "$testmode" = "yes" && echo "This was a TEST RUN! Nothing has been done for real."
}


create_runtime_conf () {
    # Clean up and Create runtime configuration file 
    initerr=0
    command="00-$project-RuntimeConfig-Initialization"
    title="Puppi environment setup: $command"
    code="rm -rf $workdir/$project && touch $workdir/$project/config [...]"
    command="00-$project-RuntimeConfig-Initialization"
    echo -n $title

    echo $workdir | grep tmp >/dev/null 2>&1 || ( echo "Workdir must contain string tmp" ; exit 1 )
    rm -rf $workdir/$project || initerr=1
    storedir=$workdir/$project/store || initerr=1
    mkdir -p $storedir || initerr=1
    touch $workdir/$project/config || initerr=1
    chmod 644 $workdir/$project/config || initerr=1
    save_runtime_config "project=$project" || initerr=1
    save_runtime_config "tag=$tag" || initerr=1
    save_runtime_config "action=$action" || initerr=1
    save_runtime_config "storedir=$storedir" || initerr=1
    save_runtime_config "force=$force" || initerr=1
    save_runtime_config "testmode=$testmode" || initerr=1
    save_runtime_config "interactive=$interactive" || initerr=1
    for oopt in $(echo $options) ; do
        save_runtime_config "$(echo $oopt)" || initerr=1
    done
    
    echo $initerr | grep "0" 2>&1 > /dev/null
    handle_result
}


showhelp () {
   echo "Usage: puppi <command> <project> [options]"
   echo " "
   echo "Available commands:"
   echo "check [project] - Run puppi checks host-wide or for a specific project"
   echo "deploy <project> - Deploy the specified project"
   echo "rollback <project> - Rollback the specified project. "
   echo " "
   echo "Available options:"
   echo "-f - Force puppi commands execution flow also on CRITICAL errors"
   echo "-i - Interactively ask confirmation for every step"
   echo "-t - Test mode. Just show the commands that should be executed"
   echo "-o \"parameter=value parameter2=value2\" - Set manual options to override defaults"
   echo " "
   echo "Available projects:"
   ls -1 $projectsdir
}

debug () {
    echo "basedir   = $basedir"
    echo "checksdir = $checksdir"
    echo "workdir = $workdir"
    echo "RETVAL  = $RETVAL"

    echo_success
    echo_warning
    echo_failure
}

# Check Input
if [ "$#" = "0" ] ; then
    showhelp
    exit
fi


while [ $# -gt 0 ]; do
  case "$1" in
    deploy|rollback)
      export action=$1
      if [ ! -z "$2" ] ; then
        export project=$2
        shift 2
      else
        showhelp
        exit
        shift
      fi
    ;;
    check)
      export action=$1
      if [ ! -z "$2" ] ; then
        export project=$2
        shift 2
      else
        check_host
        shift
      fi
    ;;
    -i)
      interactive="yes"
      shift ;;
    -f)
      force="yes"
      shift ;;
    -t)
      testmode="yes"
      runcommand="cat"
      shift ;;
    -o)
      options="$2"
      shift 2;;
    *)
      showhelp
      exit
      ;;
  esac
done

# Action!
case $action in 
    check) check ;;
    rollback) create_runtime_conf ; rollback ;;
    deploy) create_runtime_conf ; deploy ;;
esac

#Â debug 

